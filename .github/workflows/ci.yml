name: Astro CI/CD + NVD Scan  # Nombre del workflow a visualizar en GitHub Actions

on:
  push:
    branches: [ "main" ]  # Se activa en push a la rama main
  pull_request:
    branches: [ "main" ]  # Se activa en pull requests a la rama main

jobs:
  build:  # Definición del job principal
    runs-on: ubuntu-latest  # Se ejecuta en un runner con Ubuntu

    steps:
      - name: Checkout código  
        # Paso para clonar el repositorio en el runner
        uses: actions/checkout@v4

      - name: Configurar Node.js  
        # Paso que instala la versión 22 de Node.js y configura la caché para npm
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'  # Utiliza npm para la gestión del caché

      - name: Instalar dependencias  
        # Se instalan las dependencias definidas en package.json usando npm
        run: npm install

      - name: Compilar sitio Astro  
        # Ejecuta el script "build" definido en package.json para compilar tu sitio Astro
        run: npm run build
      - name: Subir artefacto del sitio  
        # Sube la carpeta "dist/" generada en la compilación como artefacto para posteriores análisis o descargas
        uses: actions/upload-artifact@v4
        with:
          name: astro-dist
          path: dist/

      - name: Escanear vulnerabilidades con NVD  
        # Instala el escáner de vulnerabilidades de Python y lo ejecuta para analizar la versión de astro
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}  # Se pasa la API key desde los secrets del repositorio
        run: |
          pip install cve-vulnerability-scanner                   # Instala la herramienta de escaneo
          echo "astro,5.11.0" > deps.csv                          # Crea un archivo CSV con la dependencia "astro" y su versión
          cve-vulnerability-scanner deps.csv -o reporte.md        # Ejecuta el escaneo y genera el reporte en reporte.md